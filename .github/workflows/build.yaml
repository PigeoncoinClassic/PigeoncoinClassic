---
name: Pigeoncoin Build
on:
  push:
    branches:
      - master
      - develop
      - 'ft/*'
  pull_request:
    branches:
      - master
env:
  SOURCE_ARTIFACT: source
jobs:
  create-source-distribution:
    name: Create Source Distribution
    runs-on: ubuntu-18.04
    env:
      ARTIFACT_DIR: source
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install Required Packages
      run: |
        sudo apt-get install build-essential libtool autotools-dev automake pkg-config libssl-dev libevent-dev bsdmainutils python3
        sudo apt-get install libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-program-options-dev libboost-test-dev libboost-thread-dev
        sudo apt-get install libboost-all-dev
        sudo apt-get install libdb5.3-dev libdb5.3++-dev
        sudo apt-get update
        sudo apt-get install libminiupnpc-dev
        sudo apt-get install libzmq3-dev
        sudo apt-get install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libprotobuf-dev protobuf-compiler
        sudo apt-get install libqrencode-dev
    - name: Create Distribution Tarball
      run: |
        ./autogen.sh
        ./configure --with-miniupnpc
        make dist
    - name: Download Dependencies
      run: make -C depends download
    - name: Create Dependencies Tarball
      run: tar -czf depends.tar.gz depends
    - name: Prepare Files for Artifact
      run: |
        mkdir -p $ARTIFACT_DIR
        mv depends.tar.gz dingocoin-*.tar.gz $ARTIFACT_DIR
    - name: Upload Artifact
      uses: actions/upload-artifact@v1
      with:
        name: ${{ env.SOURCE_ARTIFACT }}
        path: ${{ env.ARTIFACT_DIR }}

  build-ubuntu18:
    name: Ubuntu18 build
    needs: checking-build-version
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Getting Version
        uses: actions/download-artifact@v1
        with:
          name: version
      - name: Extract version
        run: |
          cat version/version.txt >> $GITHUB_ENV
      - name: Install Required Packages
        run: |
          echo "building $BUILD_VERSION version"
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install curl build-essential libtool autotools-dev automake pkg-config python3 bsdmainutils cmake
      - name: build depends
        run: |
          echo "building with $(nproc) threads"
          make -C depends -j$(nproc)
      - name: configure
        run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/x86_64-pc-linux-gnu
      - name: build binary
        run: |
          make -j$(nproc)
          mkdir -p $BUILD_DIR
          mv src/{pigeon-cli,pigeon-tx,pigeond,qt/pigeon-qt} $BUILD_DIR/
          strip $BUILD_DIR/*
      - name: generate checksum and compress
        run: |
          echo "buildng $BUILD_VERSION version"
          cd $BUILD_DIR
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          cd ..
          tar -cvzf ${COIN_NAME}-ubuntu18-${BUILD_VERSION}.tar.gz $BUILD_DIR/*
          mkdir -p ${COMPRESS_DIR}
          mv ${COIN_NAME}-ubuntu18-${BUILD_VERSION}.tar.gz ${COMPRESS_DIR}/
          cd ${COMPRESS_DIR}
          echo "sha256: `shasum ${COIN_NAME}-ubuntu18-${BUILD_VERSION}.tar.gz`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-ubuntu18-${BUILD_VERSION}.tar.gz`" >> checksums.txt
          cd ..
          cat ${COMPRESS_DIR}/checksums.txt
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.COIN_NAME }}-ubuntu18-${{ env.BUILD_VERSION }}
          path: ${{ env.COMPRESS_DIR }}
  build-macos:
    name: macos build
    needs: checking-build-version
    runs-on: macos-10.15
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Getting Version
        uses: actions/download-artifact@v1
        with:
          name: version
      - name: Extract version
        run: |
          cat version/version.txt >> $GITHUB_ENV
      - name: Install Required Packages
        run: |
          brew install automake libtool pkg-config miniupnpc librsvg libnatpmp zeromq python
          pip3 install ds_store mac_alias
      - name: build depends
        run: |
          echo "building with $(nproc) threads"
          make -C depends -j8
      - name: configure
        run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/x86_64-apple-darwin19.6.0
      - name: build binary
        run: |
          make -j8
          mkdir -p $BUILD_DIR
          mv src/{pigeon-cli,pigeon-tx,pigeond,qt/pigeon-qt} $BUILD_DIR/
          strip $BUILD_DIR/*
      - name: generate checksum and compress
        run: |
          echo "buildng $BUILD_VERSION version"
          cd $BUILD_DIR
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          openssl sha256 * >> checksums.txt
          cat checksums.txt
          cd ..
          tar -cvzf ${COIN_NAME}-macos-${BUILD_VERSION}.tar.gz $BUILD_DIR/*
          mkdir -p ${COMPRESS_DIR}
          mv ${COIN_NAME}-macos-${BUILD_VERSION}.tar.gz ${COMPRESS_DIR}/
          cd ${COMPRESS_DIR}
          echo "sha256: `shasum ${COIN_NAME}-macos-${BUILD_VERSION}.tar.gz`" >> checksums.txt
          echo "openssl-sha256: `openssl sha256 ${COIN_NAME}-macos-${BUILD_VERSION}.tar.gz`" >> checksums.txt
          cat checksums.txt
          cd ..
      - name: Upload Binary Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.COIN_NAME }}-macos-${{ env.BUILD_VERSION }}
          path: ${{ env.COMPRESS_DIR }}
      - name: Generate Macos dmg files
        run: |
          make deploy
          mkdir -p macos-dmg
          mv Pigeoncoin-Qt.dmg macos-dmg/
          cd macos-dmg
          echo "sha256: `shasum Pigeoncoin-Qt.dmg`" >> checksums.txt
          echo "openssl-sha256: `openssl sha256 Pigeoncoin-Qt.dmg`" >> checksums.txt
          cd ..
      - name: Upload dmg file
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.COIN_NAME }}-dmg-${{ env.BUILD_VERSION }}
          path: macos-dmg
  build-arm-32:
    name: arm 32 bit build
    needs: checking-build-version
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Getting Version
        uses: actions/download-artifact@v1
        with:
          name: version
      - name: Extract version
        run: |
          cat version/version.txt >> $GITHUB_ENV
      - name: Install Required Packages
        run: |
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install curl build-essential libtool g++-arm-linux-gnueabihf autotools-dev automake pkg-config python3 bsdmainutils cmake
      - name: build depends
        run: |
          echo "building with $(nproc) threads"
          make -C depends -j$(nproc) HOST=arm-linux-gnueabihf
      - name: configure
        run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/arm-linux-gnueabihf
      - name: build binary
        run: |
          make -j$(nproc)
          mkdir -p $BUILD_DIR
          mv src/{pigeon-cli,pigeon-tx,pigeond,qt/pigeon-qt} $BUILD_DIR/
      - name: generate checksum and compress binary
        run: |
          echo "buildng $BUILD_VERSION version"
          cd $BUILD_DIR
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          cd ..
          tar -cvzf ${COIN_NAME}-arm32-${BUILD_VERSION}.tar.gz $BUILD_DIR/*
          mkdir -p ${COMPRESS_DIR}
          mv ${COIN_NAME}-arm32-${BUILD_VERSION}.tar.gz ${COMPRESS_DIR}/
          cd ${COMPRESS_DIR}
          echo "sha256: `shasum ${COIN_NAME}-arm32-${BUILD_VERSION}.tar.gz`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-arm32-${BUILD_VERSION}.tar.gz`" >> checksums.txt
          cat checksums.txt
          cd ..
      - name: Upload Binary Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.COIN_NAME }}-arm32-${{ env.BUILD_VERSION }}
          path: ${{ env.COMPRESS_DIR }}
  build-arm-64:
    name: arm 64 bit build
    needs: checking-build-version
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Getting Version
        uses: actions/download-artifact@v1
        with:
          name: version
      - name: Extract version
        run: |
          cat version/version.txt >> $GITHUB_ENV
      - name: Install Required Packages
        run: |
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install curl build-essential libtool g++-aarch64-linux-gnu autotools-dev automake pkg-config python3 bsdmainutils cmake
      - name: build depends
        run: |
          echo "building with $(nproc) threads"
          make -C depends -j$(nproc) HOST=aarch64-linux-gnu
      - name: configure
        run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/aarch64-linux-gnu
      - name: build binary
        run: |
          make -j$(nproc)
          mkdir -p $BUILD_DIR
          mv src/{pigeon-cli,pigeon-tx,pigeond,qt/pigeon-qt} $BUILD_DIR/
      - name: generate checksum and compress binary
        run: |
          echo "buildng $BUILD_VERSION version"
          cd $BUILD_DIR
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          cd ..
          tar -cvzf ${COIN_NAME}-arm64-${BUILD_VERSION}.tar.gz $BUILD_DIR/*
          mkdir -p ${COMPRESS_DIR}
          mv ${COIN_NAME}-arm64-${BUILD_VERSION}.tar.gz ${COMPRESS_DIR}/
          cd ${COMPRESS_DIR}
          echo "sha256: `shasum ${COIN_NAME}-arm64-${BUILD_VERSION}.tar.gz`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-arm64-${BUILD_VERSION}.tar.gz`" >> checksums.txt
          cat checksums.txt
          cd ..
      - name: Upload Binary Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.COIN_NAME }}-arm64-${{ env.BUILD_VERSION }}
          path: ${{ env.COMPRESS_DIR }}
  build-win:
    name: window build
    needs: checking-build-version
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Getting Version
        uses: actions/download-artifact@v1
        with:
          name: version
      - name: Extract version
        run: |
          cat version/version.txt >> $GITHUB_ENV
      - name: Install Required Packages
        run: |
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install curl build-essential libtool autotools-dev automake pkg-config python3 bsdmainutils cmake
          sudo apt-get install -y g++-mingw-w64-x86-64 gcc-mingw-w64-x86-64 nsis
          sudo update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
          sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
      - name: build depends
        run: |
          echo "building with $(nproc) threads"
          make -C depends -j$(nproc) HOST=x86_64-w64-mingw32
      - name: configure
        run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/x86_64-w64-mingw32
      - name: build binary
        run: |
          make -j$(nproc)
          mkdir -p $BUILD_DIR
          mv src/{pigeon-cli.exe,pigeon-tx.exe,pigeond.exe,qt/pigeon-qt.exe} $BUILD_DIR/
          strip $BUILD_DIR/*
      - name: generate checksum and compress binary
        run: |
          echo "buildng $BUILD_VERSION version"
          cd $BUILD_DIR
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          cd ..
          zip -r ${COIN_NAME}-win-${BUILD_VERSION}.zip $BUILD_DIR/
          mkdir -p ${COMPRESS_DIR}
          mv ${COIN_NAME}-win-${BUILD_VERSION}.zip ${COMPRESS_DIR}/
          cd ${COMPRESS_DIR}
          echo "sha256: `shasum ${COIN_NAME}-win-${BUILD_VERSION}.zip`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-win-${BUILD_VERSION}.zip`" >> checksums.txt
          cat checksums.txt
          cd ..
      - name: Upload Binary Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.COIN_NAME }}-win-${{ env.BUILD_VERSION }}
          path: ${{ env.COMPRESS_DIR }}
      - name: generate window installation file
        run: |
          make deploy
          mkdir win64-installation
          mv *.exe win64-installation/
          cd win64-installation
          echo "sha256: `shasum *.exe`" >> checksums.txt
          echo "openssl-sha25: `sha256sum *.exe`" >> checksums.txt
          cd ..
      - name: Upload window installation file
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.COIN_NAME }}-win-installation-${{ env.BUILD_VERSION }}
          path: win64-installation